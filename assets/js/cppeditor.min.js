var editor=function(){function e(){$.each(b,function(e){$("#"+e).hide()})}function t(){$.each(b,function(e){$("#"+e).show()})}function i(e){$("#Chapter"+e).toggle();var t=parseInt(e);t-=1,t+="",t.length<2&&(t="0"+t)}function s(e,t,i){f=e,y=t,c=b[e][t],i="undefined"!=typeof i?i:0,i=i<c.source.length?i:0,v=i,$(".code-intro").hide(),$("#"+e+"-"+t).show(),$("#runtime-issues").hide(),$("#compile-issues").hide(),g.val(c.run),h.setValue("// Downloading..."),h.clearSelection(),_.text(""),c.issues&&$("#"+c.issues+"-issues").show(),C.html('<span class="icon fa-bookmark-o"></span> '+e+". "+c.title+(c.source.length>1?" (part "+(i+1)+")":"")),c.compile||(c.compile=""),d.val("g++ -Wall main.cpp "+c.compile+" -o main_prog"),$.get("https://raw.githubusercontent.com/apolukhin/Boost-Cookbook/first_edition/"+c.source[i],function(e){h.setValue(e),h.clearSelection()})}function a(){window.location="#"+f+"-recipe"+y+"-part"+(v+1)}function r(e,t,i){s(e,t,i),$("#intros-link").click(),window.setTimeout(a, 1300)}function o(){if(b[f][y].source[v+1])s(f,y,v+1);else if(b[f][y+1])s(f,y+1);else{var e=["Chapter01","Chapter02","Chapter03","Chapter04","Chapter05","Chapter06","Chapter07","Chapter08","Chapter09","Chapter10","Chapter11","Chapter12"],t=e.indexOf(f)+1;t>=e.length&&(t=0),s(e[t],0)}}function p(){if(v>0)s(f,y,v-1);else if(y>0)s(f,y-1,b[f][y-1].source.length-1);else{var e=["Chapter01","Chapter02","Chapter03","Chapter04","Chapter05","Chapter06","Chapter07","Chapter08","Chapter09","Chapter10","Chapter11","Chapter12"],t=e.indexOf(f)-1;0>t&&(t=e.length-1),f=e[t],y=b[f].length-1,s(f,y,b[f][y].source.length-1)}}function n(e){a(),_.text("");var t={src:h.getValue(),cmd:e};_.text("Executing... Please wait."),$.ajax({url:"http://coliru.stacked-crooked.com/compile",type:"POST",data:JSON.stringify(t),contentType:"text/plain; charset=utf-8",dataType:"text"}).done(function(e){_.text(e)}).fail(function(e){_.text("Server error: "+e)})}function l(){n(d.val()+" && echo 'Compilation: SUCCESS' ")}function m(){g.val()||g.val(""),n(d.val()+" && echo 'Compilation: SUCCESS. Program output:\n' && ./main_prog "+g.val()+' && echo "\nExit code: $?"')}function u(e,t,i,a,o){h=e,g=t,_=i,C=a,d=o,h.setTheme("ace/theme/textmate"),h.getSession().setMode("ace/mode/c_cpp"),h.setShowPrintMargin(!1),h.setOptions({maxLines:1/0,fontSize:"12pt"}),h.$blockScrolling=1/0;var p=window.location+"",n=p.match(/#(Chapter\d+)-recipe(\d+)-part(\d+)/i);n&&n[0]?r(n[1],n[2],n[3]-1):s("Chapter01",0,0)}var h,g,_,C,d,b={Chapter01:[{title:"Getting configuration options",source:["Chapter01/program_options_base/main.cpp","Chapter01/program_options_short/main.cpp"],compile:"-lboost_program_options",run:"--apples=10 --oranges=5"},{title:"Storing any value in a container/variable",source:["Chapter01/any/main.cpp"]},{title:"Storing multiple chosen types in a variable/container",source:["Chapter01/variant/main.cpp"]},{title:"Using a safer way to work with a container that stores multiple chosen types",source:["Chapter01/any_db_example/main.cpp","Chapter01/variant_db_example/main.cpp"]},{title:"Returning a value or flag where there is no value",source:["Chapter01/optional/main.cpp"]},{title:"Returning an array from a function",source:["Chapter01/array/main.cpp"]},{chapter:"Chapter01",title:"Combining multiple values into one",source:["Chapter01/tuple/main.cpp"]},{title:"Reordering the parameters of function",source:["Chapter01/bind_placeholders/main.cpp"]},{title:"Binding a value as a function parameter",source:["Chapter01/bind_values/main.cpp"]},{title:"Using the C++11 move emulation",source:["Chapter01/move/main.cpp"]},{title:"Making a noncopyable class",source:["Chapter01/noncopyable/main.cpp"]},{title:"Making a noncopyable but movable class",source:["Chapter01/noncopyable_movable/main.cpp"]}],Chapter02:[{title:"Converting strings to numbers",source:["Chapter02/lexical_to_number/main.cpp"]},{title:"Converting numbers to strings",source:["Chapter02/lexical_to_string/main.cpp"]},{title:"Converting numbers to numbers",source:["Chapter02/numeric_cast/main.cpp"]},{title:"Converting user-defined types to/from strings",source:["Chapter02/lexical_user_defined/main.cpp"]},{title:"Casting polymorphic objects",source:["Chapter02/polymorphic_cast/main.cpp"]},{title:"Parsing simple input",source:["Chapter02/spirit/main.cpp"]},{title:"Parsing input",source:["Chapter02/spirit_rules/main.cpp"],issues:"compile"}],Chapter03:[{title:"Managing pointers to classes that do not leave scope",source:["Chapter03/scoped_ptr/main.cpp"]},{title:"Reference counting of pointers to classes used across methods",source:["Chapter03/shared_ptr/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Managing pointers to arrays that do not leave scope",source:["Chapter03/scoped_array/main.cpp"]},{title:"Reference counting pointers to arrays used across methods",source:["Chapter03/shared_array/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Storing any functional objects in a variable",source:["Chapter03/function_fobject/main.cpp","Chapter03/function_fpointer/main.cpp"]},{title:"Passing a function pointer in a variable",source:["Chapter03/function_fpointer/main.cpp"],compile:"-std=c++11"},{title:"Passing C++11 lambda functions in a variable",source:["Chapter03/function_lambda_c++11/main.cpp"],compile:"-std=c++11"},{title:"Containers of pointers",source:["Chapter03/ptr_container_c++11/main.cpp"],compile:"-std=c++11"},{title:"Doing something at scope exit",source:["Chapter03/scope_exit/main.cpp"]},{title:"Initializing the base class by a member of the derived class",source:["Chapter03/base_from_member/main.cpp"]}],Chapter04:[{title:"Checking sizes at compile time",source:["Chapter04/static_assert/main.cpp"]},{title:"Enabling the usage of templated functions for integral types",source:["Chapter04/enable_if_c/main.cpp"]},{title:"Disabling templated functions' usage for real types",source:["Chapter04/disable_if_c/main.cpp"]},{title:"Creating a type from number",source:["Chapter04/mpl_int_/main.cpp"]},{title:"Implementing a type trait",source:["Chapter04/is_stdvector/main.cpp"]},{title:"Selecting an optimal operator for a template parameter",source:["Chapter04/conditional/main.cpp"]},{title:"Getting a type of expression in C++03",source:["Chapter04/typeof/main.cpp"]}],Chapter05:[{title:"Creating an execution thread",source:["Chapter05/thread/main.cpp"],compile:"-lboost_thread -lboost_system",issues:"runtime"},{title:"Syncing access to a common resource",source:["Chapter05/mutex/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Fast access to common resource using atomics",source:["Chapter05/atomics/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Creating a work_queue class",source:["Chapter05/work_queue/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Multiple-readers-single-writer lock",source:["Chapter05/shared_lock/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Creating variables that are unique per thread",source:["Chapter05/thread_specific_ptr/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Interrupting a thread",source:["Chapter05/interruptions/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Manipulating a group of threads",source:["Chapter05/thread_group/main.cpp"],compile:"-lboost_thread -lboost_system"}],Chapter06:[{title:"Registering a task for processing an arbitrary datatype",source:["Chapter06/tasks_processor_base/main.cpp","Chapter06/tasks_processor_base/tasks_processor_base.hpp"],compile:"-lboost_thread -lboost_system",issues:"compile"},{title:"Making timers and processing timer events as tasks",source:["Chapter06/tasks_processor_timers/main.cpp","Chapter06/tasks_processor_timers/tasks_processor_timers.hpp"],compile:"-lboost_thread -lboost_system",issues:"compile"},{title:"Network communication as a task",source:["Chapter06/tasks_processor_network/main.cpp","Chapter06/tasks_processor_network/tasks_processor_network.hpp"],compile:"-lboost_thread -lboost_system",issues:"compile"},{title:"Accepting incoming connections",source:["Chapter06/tasks_processor_network/main.cpp","Chapter06/tasks_processor_network/tasks_processor_network.hpp"],compile:"-lboost_thread -lboost_system",issues:"compile"},{title:"Executing different tasks in parallel",source:["Chapter06/tasks_processor_multithread/main.cpp","Chapter06/tasks_processor_multithread/tasks_processor_multithread.hpp"],compile:"-lboost_thread -lboost_system",issues:"compile"},{title:"Conveyor tasks processing",source:["Chapter06/conveyor/main.cpp"],compile:"-lboost_thread -lboost_system"},{title:"Making a nonblocking barrier",source:["Chapter06/nonblocking_barrier/main.cpp"],compile:"-lboost_thread -lboost_system",issues:"compile"},{title:"Storing an exception and making a task from it",source:["Chapter06/exception_ptr/main.cpp"],compile:"-lboost_thread -lboost_system",issues:"compile"},{title:"Getting and processing system signals as tasks",source:["Chapter06/tasks_processor_signals/main.cpp","Chapter06/tasks_processor_signals/tasks_processor_signals.hpp"],compile:"-lboost_thread -lboost_system",issues:"compile"}],Chapter07:[{title:"Changing cases and case-insensitive comparison",source:["Chapter07/case_conv/main.cpp"]},{title:"Matching strings using regular expressions",source:["Chapter07/regex_match/main.cpp"],compile:"-lboost_regex",issues:"runtime"},{title:"Searching and replacing strings using regular expressions",source:["Chapter07/regex_replace/main.cpp"],compile:"-lboost_regex",issues:"runtime"},{title:"Formatting strings using safe printf-like functions",source:["Chapter07/format/main.cpp"]},{title:"Replacing and erasing strings",source:["Chapter07/string_algo/main.cpp"]},{title:"Representing a string with two iterators",source:["Chapter07/iterator_range/main.cpp"]},{title:"Using a reference to string type",source:["Chapter07/string_ref/main.cpp"]}],Chapter08:[{title:'Using type "vector of types"',source:["Chapter08/vector_of_types/main.cpp"]},{title:"Manipulating a vector of types",source:["Chapter08/manipulating_vector_of_types/main.cpp"]},{title:"Getting a function's result type at compile time",source:["Chapter08/result_of_c++11/main.cpp"],compile:"-std=c++11"},{title:"Making a higher-order metafunction",source:["Chapter08/higher_order_metafunctions/main.cpp"]},{title:"Evaluating metafunctions lazily",source:["Chapter08/lazy/main.cpp"]},{title:"Converting all the tuple elements to strings",source:["Chapter08/tuple_to_string/main.cpp"]},{title:"Splitting tuples",source:["Chapter08/splitting_tuple/main.cpp"]}],Chapter09:[{title:"Comparing strings in an ultra-fast manner",source:["Chapter09/hash/main.cpp"]},{title:"Using an unordered set and map",source:["Chapter09/unordered/main.cpp"]},{title:"Making a map, where value is also a key",source:["Chapter09/bimap/main.cpp"]},{title:"Using multi-index containers",source:["Chapter09/multiindex/main.cpp"]},{title:"Getting the benefits of single-linked list and memory pool",source:["Chapter09/slist_and_pool/main.cpp"],compile:"-lboost_system"},{title:"Using flat associative containers",source:["Chapter09/flat/main.cpp"]}],Chapter10:[{title:"Detecting int128 support",source:["Chapter10/int128/main.cpp"]},{title:"Detecting RTTI support",source:["Chapter10/no_rtti/main.cpp"]},{title:"Speeding up compilation using C++11 extern templates",source:["Chapter10/extern_template/main.cpp","Chapter10/extern_template/header.hpp"],compile:"-std=c++11",issues:"compile"},{title:"Writing metafunctions using simpler methods",source:["Chapter10/constexpr_c++11/main.cpp"],compile:"-std=c++11"},{title:"Reducing code size and increasing performance of user-defined types (UDTs) in C++11",source:["Chapter10/noexcept_c++11/main.cpp"],compile:"-std=c++11"},{title:"The portable way to export and import functions and classes",source:["Chapter10/export_import/main.cpp","Chapter10/my_library/my_library.cpp","Chapter10/my_library/my_library.hpp"],issues:"compile"},{title:"Detecting the Boost version and getting latest features",source:["Chapter10/version/main.cpp"]}],Chapter11:[{title:"Listing files in a directory",source:["Chapter11/listing_files/main.cpp"],compile:"-lboost_system -lboost_filesystem"},{title:"Erasing and creating files and directories",source:["Chapter11/erasing_files/main.cpp"],compile:"-lboost_system -lboost_filesystem"},{title:"Passing data quickly from one process to another",source:["Chapter11/interprocess_basics/main.cpp"],compile:"-lrt -pthread",issues:"runtime"},{title:"Syncing interprocess communications",source:["Chapter11/interprocess_queue/main.cpp"],compile:"-lrt -pthread",issues:"runtime"},{title:"Using pointers in shared memory",source:["Chapter11/interprocess_pointers/main.cpp"],compile:"-lrt -pthread",issues:"runtime"},{title:"The fastest way to read files",source:["Chapter11/reading_files/main.cpp"],issues:"runtime",run:"c"},{title:"Coroutines – saving the state and postponing the execution",source:["Chapter11/coroutines/main.cpp"],compile:"-lboost_coroutine -lboost_thread -lboost_system"}],Chapter12:[{title:"Working with graphs",source:["Chapter12/graph/main.cpp"]},{title:"Visualizing graphs",source:["Chapter12/graph_vis/main.cpp"],issues:"compile"},{title:"Using a true random number generator",source:["Chapter12/random/main.cpp"],compile:"-lboost_random -lboost_system"},{title:"Using portable math functions",source:["Chapter12/math/main.cpp"]},{title:"Writing test cases",source:["Chapter12/testing/main.cpp"],compile:"-static -lboost_unit_test_framework -lboost_system",issues:"compile"},{title:"Combining multiple test cases in one test module",source:["Chapter12/testing_advanced/main.cpp","Chapter12/testing_advanced/developer1.cpp","Chapter12/testing_advanced/developer2.cpp","Chapter12/testing_advanced/foo.cpp","Chapter12/testing_advanced/foo.hpp"],compile:"-static -lboost_unit_test_framework -lboost_system",issues:"compile"},{title:"Manipulating images",source:["Chapter12/gil/main.cpp","Chapter12/testing_advanced/developer1.cpp"],compile:"-lpng",issues:"compile"}]},f=0,y=0,v=0;return{download:r,compile:l,run:m,init:u,next:o,prev:p,chapter_toggle:i,chapter_show_all:t,chapter_hide_all:e,set_local_url:a}}();

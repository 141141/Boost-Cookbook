# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Antony Polukhin 2014-2015.

#
# See https://svn.boost.org/trac/boost/wiki/TravisCoverals for description of this file
# and how it can be used with Boost libraries.
#
# File revision 2 simplified

language: cpp
compiler:
#    - clang
    - gcc

os:
    - linux

env:
    global:
        # Autodetect Boost branch by using the following code: - BRANCH_TO_TEST=`git rev-parse --abbrev-ref HEAD`
        # or by - BRANCH_TO_TEST=$TRAVIS_BRANCH or just directly specify it
        - BRANCH_TO_TEST=$TRAVIS_BRANCH

        # Files, which coverage results must be ignored (files from other projects).
        # Example: - IGNORE_COVERAGE='*/boost/progress.hpp */filesystem/src/*'
        - IGNORE_COVERAGE=''

before_install:
    # Set this to the name of the library
    - PROJECT_TO_TEST=`basename $TRAVIS_BUILD_DIR`
    - echo "Testing $PROJECT_TO_TEST"

    - sudo apt-get install -qq libboost-dev qt4-qmake

    # Cloning Boost libraries (fast nondeep cloning)
    - PROJECT_DIR=`pwd`
    - BOOST=$HOME/boost-local
    - git init $BOOST
    - cd $BOOST
    - git remote add --no-tags -t $BRANCH_TO_TEST origin https://github.com/boostorg/boost.git
    - git fetch --depth=1
    - git checkout $BRANCH_TO_TEST
    - git submodule update --init --merge
    - git remote set-branches --add origin $BRANCH_TO_TEST
    - git pull --recurse-submodules
    - git submodule update --init
    - git checkout $BRANCH_TO_TEST
    - git submodule foreach "git reset --quiet --hard; git clean -fxd"
    - git reset --hard; git clean -fxd
    - git status
    - ./bootstrap.sh
    - ./b2 headers
    - ./b2 -j4 toolset=$CC address-model=64 architecture=x86 --with-program_options --with-filesystem --with-system --with-test --with-thread --with-chrono --with-regex --with-random --with-context --with-coroutine stage
    - cd $PROJECT_DIR

script:
    # `--coverage` flags required to generate coverage info for Coveralls
    - if [ "$CC" == "clang" ]; then qmake "QMAKE_CXX=$CXX" "QMAKE_LFLAGS+=-Wl,-rpath=$BOOST/stage/lib" "INCLUDEPATH+=$BOOST" "LIBS+=-L$BOOST/stage/lib" BoostBook.pro; fi
    - if [ "$CC" == "gcc" ]; then qmake "QMAKE_CXXFLAGS+=--coverage" "QMAKE_LFLAGS+=--coverage -Wl,-rpath=$BOOST/stage/lib" "INCLUDEPATH+=$BOOST" "LIBS+=-L$BOOST/stage/lib" BoostBook.pro; fi
    - make -j4

    # Creating script for examples execution
    - echo 'declare -A optionsmap'                                                  >run_examples.sh
    - echo 'optionsmap["program_options_base"]="--apples=10 --oranges=20"'          >>run_examples.sh
    - echo 'for i in `find ./Chapter* -type f -executable`; do '                    >>run_examples.sh
    - echo '    echo -e "\n************* Running $i ${optionsmap[${progname}]}"'    >>run_examples.sh
    - echo '    cd "$(dirname $i)"'                                                 >>run_examples.sh
    - echo '    progname="$(basename $i)"'                                          >>run_examples.sh
    - echo '    ./"${progname}" ${optionsmap["${progname}"]}'                       >>run_examples.sh
    - echo '    if [ $? -ne 0 ] ; then echo "!!! FAILED !!!"; exit -1; fi'          >>run_examples.sh
    - echo '    cd $TRAVIS_BUILD_DIR'                                               >>run_examples.sh
    - echo 'done'                                                                   >>run_examples.sh
    - cat ./run_examples.sh
    - chmod +x ./run_examples.sh

    # Executing examples
    - ./run_examples.sh

after_success:
    # Copying Coveralls data to a separate folder if any
    - mkdir -p $TRAVIS_BUILD_DIR/coverals
    - find ./Chapter* -name "*.gcda" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
    - find ./Chapter* -name "*.gcno" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;

    # Preparing Coveralls data by
    # ... installing the tools
    - sudo apt-get install -qq python-yaml lcov
    # ... changind data format to a readable one
    - lcov --directory $TRAVIS_BUILD_DIR/coverals --base-directory ./ --capture --output-file $TRAVIS_BUILD_DIR/coverals/coverage.info

    # ... erasing /test/ /example/ folder data
    - lcov --remove $TRAVIS_BUILD_DIR/coverals/coverage.info "/usr*" $BOOST $IGNORE_COVERAGE -o $TRAVIS_BUILD_DIR/coverals/coverage.info

    # Sending data to Coveralls
    - cd $TRAVIS_BUILD_DIR
    - gem install coveralls-lcov
    - coveralls-lcov coverals/coverage.info

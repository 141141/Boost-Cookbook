# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Antony Polukhin 2014-2017.

#
# See https://svn.boost.org/trac/boost/wiki/TravisCoverals for description of this file
# and how it can be used with Boost libraries.


sudo: false
language: cpp
compiler:
    - gcc

os:
    - linux

env:
    global:
        - BRANCH_TO_TEST=master
        - IGNORE_COVERAGE='*/boost-local/*'

    matrix:
        # Note that "--coverage -fsanitize=address,leak,undefined -DBOOST_TRAVISCI_BUILD" are added automatically lower in code
        - CXX_FLAGS="--coverage" LINK_FLAGS="--coverage" TOOLSET=gcc CXXTOOLSET=g++
        - CXX_FLAGS="--coverage" LINK_FLAGS="--coverage" TOOLSET=gcc-6 CXXTOOLSET=g++-6
        - CXX_FLAGS="--coverage" LINK_FLAGS="--coverage" TOOLSET=clang-3.9 CXXTOOLSET=clang++-3.9
        #- CXX_FLAGS="-std=c++11 -stdlib=libc++" LINK_FLAGS="-stdlib=libc++" TOOLSET=clang
        #- CXX_FLAGS="-std=c++1y -stdlib=libc++" LINK_FLAGS="-stdlib=libc++" TOOLSET=clang

###############################################################################################################
# From this point and below code is same for all the Boost libs
###############################################################################################################


# Installing additional tools
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.9
    - git-core
    packages:
    - git
    - python-yaml
    - gcc-6
    - g++-6
    - clang-3.9
    - qt4-qmake
    - language-pack-ru



before_install:
    # Set this to the name of the library
    - PROJECT_TO_TEST=`basename $TRAVIS_BUILD_DIR`
    - echo "Testing $PROJECT_TO_TEST"

    # Creating script for examples execution
    - echo 'declare -A optionsmap'                                                  >run_examples.sh
    - echo 'optionsmap["01_A_program_options_base"]="--apples=10 --oranges=20"'     >>run_examples.sh
    - echo 'optionsmap["gil"]="get-boost.png"'                                      >>run_examples.sh
    - echo 'tasks_processor_signals_helper() {'                                     >>run_examples.sh
    - echo '    sleep 2; '                                                          >>run_examples.sh
    - echo '    killall tasks_processor_signals -SIGINT; sleep 1; '                 >>run_examples.sh
    - echo '    killall tasks_processor_signals -SIGINT; sleep 1; '                 >>run_examples.sh
    - echo '    killall tasks_processor_signals -SIGINT; sleep 1; '                 >>run_examples.sh
    - echo '} '                                                                     >>run_examples.sh
    - echo 'interprocess_basics_run() {'                                            >>run_examples.sh
    - echo '    echo "0" | ./Chapter11/interprocess_basics/interprocess_basics '    >>run_examples.sh
    - echo '} '                                                                     >>run_examples.sh
    - echo ''                                                                       >>run_examples.sh
    - echo 'chmod -x ./Chapter10/my_library/*'                                      >>run_examples.sh
    - echo 'for i in `find ./Chapter* -type f -executable`; do '                    >>run_examples.sh
    - echo '    echo -e "\n************* Running $i"'                               >>run_examples.sh
    - echo '    progname="$(basename $i)"'                                          >>run_examples.sh
    - echo '    case "${progname}" in '                                             >>run_examples.sh
    - echo '    "tasks_processor_signals") '                                        >>run_examples.sh
    - echo '        tasks_processor_signals_helper & '                              >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    "reading_files") '                                                  >>run_examples.sh
    - echo '        $i c; time $i m; time $i r; time $i a; continue '               >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    "interprocess_basics") '                                            >>run_examples.sh
    - echo '        mkfifo fifo1; $i<fifo1 & '                                      >>run_examples.sh
    - echo '        sleep 1 '                                                       >>run_examples.sh
    - echo '        interprocess_basics_run & '                                     >>run_examples.sh
    - echo '        interprocess_basics_run & '                                     >>run_examples.sh
    - echo '        interprocess_basics_run & '                                     >>run_examples.sh
    - echo '        interprocess_basics_run & '                                     >>run_examples.sh
    - echo '        interprocess_basics_run & '                                     >>run_examples.sh
    - echo '        sleep 1 '                                                       >>run_examples.sh
    - echo '        echo "0">fifo1 '                                                >>run_examples.sh
    - echo '        rm fifo1; continue '                                            >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    "interprocess_queue") '                                             >>run_examples.sh
    - echo '        $i & '                                                          >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    "interprocess_pointers") '                                          >>run_examples.sh
    - echo '        $i '                                                            >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    "regex_match" | "regex_replace") '                                  >>run_examples.sh
    - echo '        continue '                                                      >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    "gil") '                                                            >>run_examples.sh
    - echo '        wget http://www.boost.org/style-v2/css_0/get-boost.png '        >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    "01_B_program_options_short") '                                     >>run_examples.sh
    - echo '        cp Chapter01/01_B_program_options_short/apples_oranges.cfg ./ ' >>run_examples.sh
    - echo '        ;; '                                                            >>run_examples.sh
    - echo '    esac'                                                               >>run_examples.sh
    - echo ''                                                                       >>run_examples.sh
    - echo '    ./"$i" ${optionsmap["${progname}"]}'                                >>run_examples.sh
    - echo '    if [ $? -ne 0 ] ; then echo "!!! FAILED !!!"; exit -1; fi'          >>run_examples.sh
    - echo 'done'                                                                   >>run_examples.sh
    - chmod +x ./run_examples.sh

    # Cloning Boost libraries (fast nondeep cloning)
    - PROJECT_DIR=`pwd`
    - BOOST=$HOME/boost-local
    - git init $BOOST
    - cd $BOOST
    - git remote add --no-tags -t $BRANCH_TO_TEST origin https://github.com/boostorg/boost.git
    - git fetch --depth=1
    - git checkout $BRANCH_TO_TEST
    - git submodule update --init --merge >/dev/null
    - git remote set-branches --add origin $BRANCH_TO_TEST
    - git pull --recurse-submodules
    - git submodule update --init >/dev/null
    - git checkout $BRANCH_TO_TEST
    - git submodule foreach "git reset --quiet --hard; git clean -fxd"
    - git reset --hard; git clean -fxd
    - git status
    - ./bootstrap.sh
    - ./b2 headers
    - ./b2 -j4 toolset=$TOOLSET address-model=64 architecture=x86 --with-program_options --with-filesystem --with-system --with-test --with-thread --with-chrono --with-regex --with-random --with-context --with-coroutine stage
    - cd $PROJECT_DIR

script:
    - qmake "QMAKE_CXX=$CXXTOOLSET" "QMAKE_LINK=$CXXTOOLSET" "QMAKE_CXXFLAGS+=$CXX_FLAGS" "QMAKE_LFLAGS+=$LINK_FLAGS" "BOOST_PATH=$BOOST" BoostBook.pro
    - make -j4

    # Executing examples
    - python ./test.py
    - ./run_examples.sh

after_success:
    # Copying Coveralls data to a separate folder
    - mkdir -p $TRAVIS_BUILD_DIR/coverals
    - find ../../../bin.v2/ -name "*.gcda" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
    - find ../../../bin.v2/ -name "*.gcno" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
    - find ../../../bin.v2/ -name "*.da" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
    - find ../../../bin.v2/ -name "*.no" -exec cp "{}" $TRAVIS_BUILD_DIR/coverals/ \;
    - wget https://github.com/linux-test-project/lcov/archive/v1.12.zip
    - unzip v1.12.zip
    - LCOV="`pwd`/lcov-1.12/bin/lcov --gcov-tool gcov-6"

    # Preparing Coveralls data by changind data format to a readable one
    - echo "$LCOV --directory $TRAVIS_BUILD_DIR/coverals --base-directory `pwd` --capture --output-file $TRAVIS_BUILD_DIR/coverals/coverage.info"
    - $LCOV --directory $TRAVIS_BUILD_DIR/coverals --base-directory `pwd` --capture --output-file $TRAVIS_BUILD_DIR/coverals/coverage.info

    # ... erasing /test/ /example/ folder data
    - cd $BOOST
    - $LCOV --remove $TRAVIS_BUILD_DIR/coverals/coverage.info "/usr*" "*/$PROJECT_TO_TEST/test/*" $IGNORE_COVERAGE "*/$PROJECT_TO_TEST/tests/*" "*/$PROJECT_TO_TEST/examples/*" "*/$PROJECT_TO_TEST/example/*" -o $TRAVIS_BUILD_DIR/coverals/coverage.info

    # ... erasing data that is not related to this project directly
    - OTHER_LIBS=`grep "submodule .*" .gitmodules | sed 's/\[submodule\ "\(.*\)"\]/"\*\/boost\/\1\.hpp" "\*\/boost\/\1\/\*"/g'| sed "/\"\*\/boost\/$PROJECT_TO_TEST\/\*\"/d" | sed ':a;N;$!ba;s/\n/ /g'`
    - echo $OTHER_LIBS
    - eval "$LCOV --remove $TRAVIS_BUILD_DIR/coverals/coverage.info $OTHER_LIBS -o $TRAVIS_BUILD_DIR/coverals/coverage.info"

    # Sending data to Coveralls
    - cd $TRAVIS_BUILD_DIR
    - gem install coveralls-lcov
    - coveralls-lcov coverals/coverage.info
